{
	"info": {
		"_postman_id": "1ab4cc05-f644-482c-8456-d76032c83ad3",
		"name": "gr_29  HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "20",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "510",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Vadim/jjd909/12242kjkWpqc322823r23r3r457271evny",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(req.name).to.eql(jsonData.name);\r",
							"    });\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(req.age).to.eql(jsonData.age);\r",
							"    });\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(req.salary).to.eql(jsonData.salary);\r",
							"    });\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family_1 = jsonData.family\r",
							"console.log(family_1)\r",
							"// 9. Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"dog_lovely\", () => {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"   });\r",
							"// 10. Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"dog_age\", () => {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"   });\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"dog_luky\", () => {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.include(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"age_luky\", () => {\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Mery&age=32&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mery"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "5000"
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name request\", function () {\r",
							"    pm.expect(req.name).to.eql(jsonData.name);\r",
							"    });\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"check age request\", function () {\r",
							"\r",
							"pm.expect(parseInt(req.age)).to.eql(jsonData.age);\r",
							" });\r",
							"//  7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"// 8. Вывести в консоль параметр salary из response\r",
							"let salary_1 = jsonData.salary\r",
							"console.log(salary_1)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let salary_3 = jsonData.salary[0]\r",
							"console.log(salary_3)\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let salary_4 = jsonData.salary[1]\r",
							"console.log(salary_4)\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let salary_5 = jsonData.salary[2]\r",
							"console.log(salary_5)\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_0\", function () {\r",
							"    pm.expect(parseInt(req.salary)).to.eql(jsonData.salary[0]);\r",
							"    });\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_1\", function () {\r",
							"    pm.expect(req.salary * 2).to.eql(parseInt(jsonData.salary[1]));\r",
							"    });\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_2\", function () {\r",
							"    pm.expect(req.salary * 3).to.eql(parseInt(jsonData.salary[2]));\r",
							"    });\r",
							"// 16. Создать в окружении переменную age/ передать переменную в окружение\r",
							"let age = jsonData.age\r",
							"pm.environment.set(\"age\", age);\r",
							"// 17. Создать в окружении переменную name/ передать переменную в окружение\r",
							"let name = jsonData.name\r",
							"pm.environment.set(\"name\", name);\r",
							"// 18. Создать в окружении переменную salary/ передать переменную в окружение\r",
							"let salary = jsonData.salary\r",
							"pm.environment.set(\"salary\", salary);\r",
							"// 19. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let arr = {\r",
							"\"age\":30,\r",
							"\"name\": \"Ivan\",\r",
							"\"salary\":[\r",
							"    5000,\r",
							"    \"10000\",\r",
							"    \"15000\"\r",
							"]\r",
							"} \r",
							"for (let i = 0; i < arr.salary.length; i++) {\r",
							"    console.log(arr.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Mery&age=32&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Mery"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.) \r",
							"let name = \"Mery\"\r",
							"let name_s = jsonData.name\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(name).to.eql(name_s);\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age = \"32\"\r",
							"let age_s = jsonData.age\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(age).to.eql(age_s);\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary = 5000\r",
							"let salary_s = jsonData.salary\r",
							"pm.test(\"salar\", function () {\r",
							"    pm.expect(salary).to.eql(salary_s);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.) \r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(req.name).to.eql(jsonData.name);\r",
							"    });\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age request\", function () {\r",
							"    pm.expect(req.age).to.eql(jsonData.age);\r",
							"    });\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary request\", function () {\r",
							"    pm.expect(parseInt(req.salary)).to.eql(jsonData.salary);\r",
							"    });\r",
							"// 11. Вывести в консоль параметр family из response. \r",
							"let family_1 = jsonData.family\r",
							"console.log(family_1)\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_4 = jsonData.salary * 4\r",
							"pm.test(\"salary_4\", function () {\r",
							"    pm.expect(req.u_salary_1_5_year).to.eql(jsonData.salary_4);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mery",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"let jsonData = pm.response.json();\r",
							"let salary1 = jsonData.salary\r",
							"pm.environment.set(\"salary\", salary1);\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"let age1 = jsonData.age\r",
							"pm.environment.set(\"age\", age1);\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"let name1 = jsonData.name\r",
							"pm.environment.set(\"name\", name1);\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"// let jsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"qa_salary\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"after_6_months\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"after_12_months\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"after_1,5_year\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"after_3,5_year\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"sal_start_qa\", function () {\r",
							"    pm.expect(parseInt(req.salary)).to.eql(jsonData.start_qa_salary);\r",
							"    });\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"sal*2\", function () {\r",
							"    pm.expect(parseInt(req.salary*2)).to.eql(jsonData.qa_salary_after_6_months);\r",
							"    });\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"sal*2,7\", function () {\r",
							"    pm.expect(parseInt(req.salary*2.7)).to.eql(jsonData.qa_salary_after_12_months);\r",
							"    });\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"sal*1,5\", function () {\r",
							"    pm.expect(parseInt(req.salary*3.3)).to.eql(jsonData[\"qa_salary_after_1.5_year\"]);\r",
							"    });\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"sal*3,5\", function () {\r",
							"    pm.expect(parseInt(req.salary*3.8)).to.eql(jsonData[\"qa_salary_after_3.5_years\"]);\r",
							"    });\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1]\", function () {\r",
							"    pm.expect(parseInt(req.salary)).to.eql(jsonData.person.u_name[1]);\r",
							"    });\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(parseInt(req.age)).to.eql(jsonData.person.u_age);\r",
							"    });\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"sal_5\", function () {\r",
							"    pm.expect(parseInt(req.salary*4.2)).to.eql(jsonData.person.u_salary_5_years);\r",
							"    });\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let arr = {\r",
							"\"person\": [\r",
							"    \"u_age\": 32,\r",
							"    \"u_name\": [\r",
							"        \"Mery\",\r",
							"        5000,\r",
							"        32\r",
							"    ]\r",
							"] \r",
							"} \r",
							"for (let i = 0; i < arr.person.length; i++) {\r",
							"    console.log(arr.person[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mery",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}